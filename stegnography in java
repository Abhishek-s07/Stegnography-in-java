
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;


public class JavaStegno {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		        encode("C:\\Users\\user\\Desktop\\stegnography\\DSC_0069.jpg", "C:\\Users\\user\\Desktop\\stegnography\\image_with_message.png", "Hello, Steganography!");
		        String decodedMessage = decode("C:\\Users\\user\\Desktop\\stegnography\\image_with_message.png");
		        System.out.println("Decoded Message: " + decodedMessage);
		    }

		    public static void encode(String inputImagePath, String outputImagePath, String message) {
		        try {
		            BufferedImage image = ImageIO.read(new File("C:\\Users\\user\\Desktop\\stegnography\\DSC_0069.jpg"));
		            int width = image.getWidth();
		            int height = image.getHeight();

		            // Convert the message to binary
		            byte[] messageBytes = message.getBytes();
		            StringBuilder binaryMessage = new StringBuilder();
		            for (byte b : messageBytes) {
		                binaryMessage.append(String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0'));
		            }

		            int messageIndex = 0;

		            // Loop through each pixel and hide the message
		            for (int y = 0; y < height; y++) {
		                for (int x = 0; x < width; x++) {
		                    int pixel = image.getRGB(x, y);
		                    int alpha = (pixel >> 24) & 0xFF;
		                    int red = (pixel >> 16) & 0xFF;
		                    int green = (pixel >> 8) & 0xFF;
		                    int blue = pixel & 0xFF;

		                    // Hide message in the least significant bit of each color component
		                    if (messageIndex < binaryMessage.length()) {
		                        red = (red & 0xFE) | (binaryMessage.charAt(messageIndex++) - '0');
		                        green = (green & 0xFE) | (binaryMessage.charAt(messageIndex++) - '0');
		                        blue = (blue & 0xFE) | (binaryMessage.charAt(messageIndex++) - '0');
		                    }

		                    int newPixel = (alpha << 24) | (red << 16) | (green << 8) | blue;
		                    image.setRGB(x, y, newPixel);
		                }
		            }

		            // Save the steganographic image
		            ImageIO.write(image, "png", new File("C:\\Users\\user\\Desktop\\stegnography\\image_with_message.png"));
		            System.out.println("Message encoded successfully!");
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		    }

		    public static String decode(String imagePath) {
		        StringBuilder binaryMessage = new StringBuilder();
		        try {
		            BufferedImage image = ImageIO.read(new File("C:\\Users\\user\\Desktop\\stegnography\\image_with_message.png"));
		            int width = image.getWidth();
		            int height = image.getHeight();

		            // Loop through each pixel and extract the message
		            for (int y = 0; y < height; y++) {
		                for (int x = 0; x < width; x++) {
		                    int pixel = image.getRGB(x, y);
		                    int red = (pixel >> 16) & 0xFF;
		                    int green = (pixel >> 8) & 0xFF;
		                    int blue = pixel & 0xFF;

		                    // Extract the least significant bit of each color component
		                    binaryMessage.append(red & 1);
		                    binaryMessage.append(green & 1);
		                    binaryMessage.append(blue & 1);
		                }
		            }
		        } catch (IOException e) {
		            e.printStackTrace();
		        }

		        // Convert binary message to text
		        StringBuilder message = new StringBuilder();
		        for (int i = 0; i < binaryMessage.length(); i += 8) {
		            String binaryByte = binaryMessage.substring(i, i + 8);
		            int decimalByte = Integer.parseInt(binaryByte, 2);
		            message.append((char) decimalByte);
		        }

		        return message.toString();
		    }
		
	}


